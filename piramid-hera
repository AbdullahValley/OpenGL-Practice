#include <GL/freeglut.h>
#include <GL/gl.h>
#include <stdlib.h>

void X_Y_line()
{
    glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1.0f, 1.0f, 1.0f);
	glBegin(GL_LINES);
      glVertex3f (60 , 0, 0.0);
      glVertex3f (-60, 0, 0.0);
      glVertex3f (0 , 60, 0.0);
      glVertex3f (0, -60, 0.0);
	glEnd();
	glFlush();
}
void B_box()
{
	glColor3f(0, 0, 1);
	glPushMatrix();
	glBegin(GL_POLYGON);
      glVertex3f (0, 0.0, 0.0);
      glVertex3f (5.0,0.0, 0.0);
      glVertex3f (2.5,5, 0.0);
	glEnd();

	glPopMatrix();
}

void G_box()
{
	glColor3f(0, 1, 0);
	glPushMatrix();
	glBegin(GL_POLYGON);
      glVertex3f (0, 0.0, 0.0);
      glVertex3f (5.0,0.0, 0.0);
      glVertex3f (2.5,5, 0.0);
	glEnd();

	glPopMatrix();
}
void R_box()
{
	glColor3f(1, 0, 0);
	glPushMatrix();
	glBegin(GL_POLYGON);
      glVertex3f (0, 0.0, 0.0);
      glVertex3f (5.0,0.0, 0.0);
      glVertex3f (2.5,5, 0.0);
	glEnd();

	glPopMatrix();
}
void First_combination()
{
    glPushMatrix();
    R_box();
     glTranslatef(5,0,0);
     G_box();
     glTranslatef(5,0,0);
     B_box();
     glPopMatrix();
}
void Second_combination()
{
    glPushMatrix();
    G_box();
     glTranslatef(5,0,0);
     B_box();
     glTranslatef(5,0,0);
     R_box();
     glPopMatrix();
}
void Second2_combination()
{
    glPushMatrix();
    G_box();
     glTranslatef(5,0,0);
     B_box();
     glTranslatef(5,0,0);

     glPopMatrix();
}
void Third_combination()
{
    glPushMatrix();
    B_box();
     glTranslatef(5,0,0);
     R_box();
     glTranslatef(5,0,0);
     G_box();
     glPopMatrix();
}
void Third3_combination()
{
    glPushMatrix();
    B_box();
     glPopMatrix();
}
int pos;
void New_row_combination_1(int a)
{
    for(pos=0;pos<=a;pos=pos+15){

      glPushMatrix();
     glTranslatef(pos,0,0);
      First_combination();
      glPopMatrix();
      }
}
void New_row_combination_2(int a)
{
    for(pos=0;pos<=a;pos=pos+15){
        if(pos==a)
        {glPushMatrix();
       glTranslatef(pos,0,0);
       Second2_combination();
       glPopMatrix();}
      else
      {
       glPushMatrix();
     glTranslatef(pos,0,0);
     Second_combination();
      glPopMatrix();}
    }
}
void New_row_combination_3(int a)
{
    for(pos=0;pos<=a;pos=pos+15){
        if(pos==a){
            glPushMatrix();

     glTranslatef(pos,0,0);
      Third3_combination();
      glPopMatrix();
               }
         else{
     glPushMatrix();
     glTranslatef(pos,0,0);
      Third_combination();
      glPopMatrix();}
    }
}
void low_to_uper_increment_combination(int i)
{
         glPushMatrix();
         New_row_combination_1(i);
         glTranslatef(2.5,5,0);
         New_row_combination_2(i);
         glTranslatef(2.5,5,0);
         New_row_combination_3(i);
         glTranslatef(2.5,5,0);
         glPopMatrix();
}
void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
    X_Y_line();
    int i;
    for(i=45;i>=0;i=i-15)
	{
                                                                                                                                                             low_to_uper_increment_combination(i);
	 glTranslatef(7.5,15,0);
	 }
	 glutSwapBuffers();
}
void init(void)
{
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	glOrtho(-60.0, 60.0, -60.0, 60.0, -1.0, 1.0);
}


int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
   glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
   glutInitWindowSize (500, 500);
   glutInitWindowPosition (100, 100);
   glutCreateWindow ("Graphics");
   init ();
   glutDisplayFunc(display);
   glutMainLoop();
   return 0;
}

